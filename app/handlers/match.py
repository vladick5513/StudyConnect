from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.crud import UserRepository
from app.database import async_session_factory

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_location = State()
    waiting_for_subjects = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
last_not_found_message = {}


@router.message(Command("search"))
async def cmd_search(message: Message):
    async with async_session_factory() as session:
        repo = UserRepository(session)
        user = await repo.get_user_by_telegram_id(message.from_user.id)

        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register.")
            return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="search_age"))
    builder.add(InlineKeyboardButton(text="–ü–æ —Å—Ç—Ä–∞–Ω–µ", callback_data="search_location"))
    builder.add(InlineKeyboardButton(text="–ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="search_subjects"))

    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("search_"))
async def process_search_selection(callback: CallbackQuery, state: FSMContext):
    search_type = callback.data.split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session_factory() as session:
        repo = UserRepository(session)
        if not await repo.get_user_by_telegram_id(callback.from_user.id):
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            await callback.answer()
            return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
    if search_type == "age":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")
        await state.set_state(SearchStates.waiting_for_age)
    elif search_type == "location":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")
        await state.set_state(SearchStates.waiting_for_location)
    elif search_type == "subjects":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
        )
        await state.set_state(SearchStates.waiting_for_subjects)

    await callback.answer()


@router.message(StateFilter(SearchStates.waiting_for_age))
async def process_age_search(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        return

    age = int(message.text)
    if age < 13 or age > 80:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 13 –¥–æ 80):")
        return

    await perform_search(message, "age", age)
    await state.clear()


@router.message(StateFilter(SearchStates.waiting_for_location))
async def process_location_search(message: Message, state: FSMContext):
    await perform_search(message, "location", message.text)
    await state.clear()


@router.message(StateFilter(SearchStates.waiting_for_subjects))
async def process_subjects_search(message: Message, state: FSMContext):
    subjects = [s.strip() for s in message.text.split(",")]
    await perform_search(message, "subjects", subjects)
    await state.clear()


async def perform_search(message: Message, search_type: str, search_param):
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    if user_id in last_not_found_message:
        try:
            await message.bot.delete_message(
                chat_id=user_id,
                message_id=last_not_found_message[user_id]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        del last_not_found_message[user_id]

    async with async_session_factory() as session:
        repo = UserRepository(session)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if search_type == "age":
            matches = await repo.find_matches_by_age_param(user_id, search_param)
        elif search_type == "location":
            matches = await repo.find_matches_by_location_param(user_id, search_param)
        elif search_type == "subjects":
            matches = await repo.find_matches_by_subjects_param(user_id, search_param)

        if not matches:
            msg = await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            last_not_found_message[user_id] = msg.message_id
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
        response = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:\n\n"
        for match in matches:
            response += f"üéì –ü–∞—Ä—Ç–Ω–µ—Ä\n"
            response += f"üìç –°—Ç—Ä–∞–Ω–∞: {match.location}\n"
            response += f"üó£Ô∏è –Ø–∑—ã–∫: {match.language}\n"
            response += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {match.age}\n"
            response += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(match.subjects)}\n"

            if match.username:
                response += f"–ü—Ä–æ—Ñ–∏–ª—å: @{match.username}\n"
            else:
                response += f"Telegram ID: {match.telegram_id}\n"

            response += "\n"

        await message.answer(response)