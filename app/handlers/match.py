from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.crud import UserRepository
from app.database import async_session_factory

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
last_not_found_message = {}

@router.message(Command("search"))
async def cmd_search(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data="search_age"))
    builder.add(InlineKeyboardButton(text="–ü–æ —Å—Ç—Ä–∞–Ω–µ", callback_data="search_location"))
    builder.add(InlineKeyboardButton(text="–ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="search_subjects"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("search_"))
async def process_search(callback: CallbackQuery):
    search_type = callback.data.split("_")[1]
    user_id = callback.from_user.id

    async with async_session_factory() as session:
        repo = UserRepository(session)
        current_user = await repo.get_user_by_telegram_id(user_id)

        if not current_user:
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if user_id in last_not_found_message:
            try:
                await callback.message.bot.delete_message(
                    chat_id=user_id,
                    message_id=last_not_found_message[user_id]
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            del last_not_found_message[user_id]

        # –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        if search_type == "age":
            matches = await repo.find_matches_by_age(user_id, current_user.age)
        elif search_type == "location":
            matches = await repo.find_matches_by_location(user_id, current_user.location)
        elif search_type == "subjects":
            matches = await repo.find_matches_by_subjects(user_id, current_user.subjects)

        if not matches:
            msg = await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            last_not_found_message[user_id] = msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
        response = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:\n\n"
        for match in matches:
            response += f"üéì –ü–∞—Ä—Ç–Ω–µ—Ä\n"
            response += f"üìç –°—Ç—Ä–∞–Ω–∞: {match.location}\n"
            response += f"üó£Ô∏è –Ø–∑—ã–∫: {match.language}\n"
            response += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {match.age}\n"
            response += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(match.subjects)}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if match.username:
                response += f"–ü—Ä–æ—Ñ–∏–ª—å: @{match.username}\n"
            else:
                response += f"Telegram ID: {match.telegram_id}\n"

            response += "\n"

        await callback.message.answer(response)
        await callback.answer()
