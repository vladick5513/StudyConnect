from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.crud import UserRepository
from app.database import async_session_factory
from app.utils.validation import VALID_COUNTRIES, VALID_LANGUAGES, VALID_SUBJECTS, MIN_AGE, MAX_AGE

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_location = State()
    waiting_for_language = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_subjects = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
‚Ä¢ –ü–æ–º–æ–≥–∞—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —É—á–µ–±–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
/search - –ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register üìù
"""
    await message.answer(welcome_text)


@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    async with async_session_factory() as session:
        repo = UserRepository(session)
        user = await repo.get_user_by_telegram_id(message.from_user.id)

        if user:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é /search.")
            return

        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤–µ—Ç–µ?")
        await state.set_state(RegistrationStates.waiting_for_location)


@router.message(StateFilter(RegistrationStates.waiting_for_location))
async def process_location(message: Message, state: FSMContext):
    location = message.text.strip().capitalize()
    if location not in VALID_COUNTRIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.")
        return

    await state.update_data(location=location)
    await message.answer("–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è?")
    await state.set_state(RegistrationStates.waiting_for_language)


@router.message(StateFilter(RegistrationStates.waiting_for_language))
async def process_language(message: Message, state: FSMContext):
    language = message.text.strip().lower()
    if language not in VALID_LANGUAGES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.")
        return

    await state.update_data(language=language)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"))
    builder.add(InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"))

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=builder.as_markup())
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = "male" if callback.data == "gender_male" else "female"
    await state.update_data(gender=gender)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
    await state.set_state(RegistrationStates.waiting_for_age)
    await callback.answer()


@router.message(StateFilter(RegistrationStates.waiting_for_age))
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    age = int(message.text)
    if age < MIN_AGE or age > MAX_AGE:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {MIN_AGE} –¥–æ {MAX_AGE}).")
        return

    await state.update_data(age=age)
    await message.answer("üéì –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    await state.set_state(RegistrationStates.waiting_for_subjects)


@router.message(StateFilter(RegistrationStates.waiting_for_subjects))
async def process_subjects(message: Message, state: FSMContext):
    user_data = await state.get_data()
    subjects = [s.strip().lower() for s in message.text.split(",")]

    invalid_subjects = [s for s in subjects if s not in VALID_SUBJECTS]
    if invalid_subjects:
        await message.answer(
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –±–∏–æ–ª–æ–≥–∏—è)")
        return

    async with async_session_factory() as session:
        repo = UserRepository(session)
        await repo.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            location=user_data['location'],
            language=user_data['language'],
            gender=user_data['gender'],
            age=user_data['age'],
            subjects=subjects
        )

    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search.")
    await state.clear()