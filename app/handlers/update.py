from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.crud import UserRepository
from app.database import async_session_factory
from app.utils.validation import (
    validate_country, validate_language, validate_subjects,
    MIN_AGE, MAX_AGE
)

router = Router()

class UpdateStates(StatesGroup):
    selecting_field = State()
    updating_location = State()
    updating_language = State()
    updating_age = State()
    updating_subjects = State()

@router.message(Command("update"))
async def cmd_update(message: Message, state: FSMContext):
    async with async_session_factory() as session:
        repo = UserRepository(session)
        user = await repo.get_user_by_telegram_id(message.from_user.id)

        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register.")
            return

        profile_text = f"""
üìã –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:
üìç –°—Ç—Ä–∞–Ω–∞: {user.location}
üó£Ô∏è –Ø–∑—ã–∫: {user.language}
üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user.age}
üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(user.subjects)}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–°—Ç—Ä–∞–Ω–∞", callback_data="update_location"))
        builder.add(InlineKeyboardButton(text="–Ø–∑—ã–∫", callback_data="update_language"))
        builder.add(InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="update_age"))
        builder.add(InlineKeyboardButton(text="–ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="update_subjects"))

        await message.answer(profile_text, reply_markup=builder.as_markup())
        await state.set_state(UpdateStates.selecting_field)

@router.callback_query(StateFilter(UpdateStates.selecting_field))
async def process_update_selection(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]

    if field == "location":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
        await state.set_state(UpdateStates.updating_location)

    elif field == "language":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:")
        await state.set_state(UpdateStates.updating_language)

    elif field == "age":
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE}):")
        await state.set_state(UpdateStates.updating_age)

    elif field == "subjects":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(UpdateStates.updating_subjects)

    await callback.answer()

@router.message(StateFilter(UpdateStates.updating_location))
async def process_location_update(message: Message, state: FSMContext):
    country = validate_country(message.text)
    if not country:
        await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return

    async with async_session_factory() as session:
        repo = UserRepository(session)
        await repo.update_user_field(message.from_user.id, "location", country)

    await message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(StateFilter(UpdateStates.updating_language))
async def process_language_update(message: Message, state: FSMContext):
    language = validate_language(message.text)
    if not language:
        await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return

    async with async_session_factory() as session:
        repo = UserRepository(session)
        await repo.update_user_field(message.from_user.id, "language", language)

    await message.answer("‚úÖ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@router.message(StateFilter(UpdateStates.updating_age))
async def process_age_update(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (MIN_AGE <= int(message.text) <= MAX_AGE):
        await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE}).")
        return

    async with async_session_factory() as session:
        repo = UserRepository(session)
        await repo.update_user_field(message.from_user.id, "age", int(message.text))

    await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@router.message(StateFilter(UpdateStates.updating_subjects))
async def process_subjects_update(message: Message, state: FSMContext):
    subjects = [s.strip() for s in message.text.split(",")]

    if not validate_subjects(subjects):
        await message.answer("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return

    async with async_session_factory() as session:
        repo = UserRepository(session)
        await repo.update_user_field(message.from_user.id, "subjects", subjects)

    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()